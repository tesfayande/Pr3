package com.Project3.Backend.Services;import com.Project3.Backend.Models.User;import com.Project3.Backend.Repositories.UserRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;@Servicepublic class UserService {    @Autowired    UserRepository userRepository;    private BCryptPasswordEncoder encoder = new BCryptPasswordEncoder(12);    public User getCurrentUser(String name) {        return userRepository.findByName(name);    }    public User getCurrentUserByEmail(String email) {        return userRepository.findByEmail(email);    }    public User saveUser(User user) {        return userRepository.save(user);    }    public List<User> getAllUsers() {        return userRepository.findAll();    }    public User getUserById(int id) {        Optional<User> user = userRepository.findById(id);        if(user.isPresent()){            return user.get();        }else {            throw new RuntimeException();        }    }    public User updateUser(User user, int id) {        User existingUser = userRepository.findById(id).orElseThrow(()-> new RuntimeException());        existingUser.setName(user.getName());        existingUser.setEmail(user.getEmail());        existingUser.setFirstName(user.getFirstName());        existingUser.setLastName(user.getLastName());        existingUser.setPassword(encoder.encode(user.getPassword()));        userRepository.save(existingUser);        return existingUser;    }    public User updateUserEmail(User user, int id) {        User existingUser = userRepository.findById(id).orElseThrow(()-> new RuntimeException());        existingUser.setEmail(user.getEmail());        userRepository.save(existingUser);        return existingUser;    }    public User updateUserPassWord(User user, int id) {        User existingUser = userRepository.findById(id).orElseThrow(()-> new RuntimeException());        existingUser.setPassword(encoder.encode(user.getPassword()));        userRepository.save(existingUser);        return existingUser;    }    public User updateUserName(User user, int id) {        User existingUser = userRepository.findById(id).orElseThrow(()-> new RuntimeException());        existingUser.setName(user.getName());        userRepository.save(existingUser);        return existingUser;    }    public void deleteUser(int id) {        //check        userRepository.findById(id).orElseThrow(()-> new RuntimeException());        //delete        userRepository.deleteById(id);    }}